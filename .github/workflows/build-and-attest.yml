name: Build and Attest Container

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  id-token: write  # Required for Sigstore signing

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image with Witness
        uses: testifysec/witness-run-action@v0.3.0
        with:
          step: docker-build
          command: docker buildx build --push --platform linux/amd64 --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --metadata-file docker-metadata.json --provenance=true --sbom=true --cache-from type=gha --cache-to type=gha,mode=max .
          attestations: docker slsa git github secretscan
          attestor-slsa-export: true
          enable-sigstore: true
          enable-archivista: true

      - name: Display attestation metadata
        id: attestation
        run: |
          echo "## Attestation Metadata" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Parse docker metadata
          if [ -f docker-metadata.json ]; then
            echo "### üì¶ Docker Build Output" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            jq '{"image": .["image.name"], "digest": .["containerimage.digest"], "size": .["containerimage.descriptor"].size}' docker-metadata.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extract key metadata for easy reference
            IMAGE_DIGEST=$(jq -r '.["containerimage.digest"]' docker-metadata.json)
            echo "**Image Digest:** \`$IMAGE_DIGEST\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # SLSA metadata preview
          if [ -f slsa-predicate.json ]; then
            echo "### üîê SLSA Provenance Preview" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            jq '{buildType: .buildDefinition.buildType, builder: .runDetails.builder.id}' slsa-predicate.json >> $GITHUB_STEP_SUMMARY || echo "SLSA predicate will be generated"
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Generate attestation summary and Archivista queries
        run: |
          echo "## Witness Attestation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Provenance captured with Witness** - Complete build attestations generated" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Uploaded to Archivista** - Attestations stored for verification and querying" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Witness** captured attestations for: Git state, GitHub context, build commands, materials, products, Docker metadata, SLSA provenance, and secret scanning." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Archivista** provides a GraphQL API to query and verify these attestations." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add Archivista GraphQL query examples
          echo "## Query Attestations in Archivista" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Use these GraphQL queries at [Archivista Query Explorer](https://archivista.testifysec.io/query)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Click the links below to open pre-populated queries:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üîç Find recent attestations with GitOIDs" >> $GITHUB_STEP_SUMMARY
          echo "[‚ñ∂Ô∏è Run this query](https://archivista.testifysec.io/query?query=%7B%0A%20%20dsses(first%3A%2010)%20%7B%0A%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20gitoidSha256%0A%20%20%20%20%20%20%20%20payloadType%0A%20%20%20%20%20%20%20%20statement%20%7B%0A%20%20%20%20%20%20%20%20%20%20predicate%0A%20%20%20%20%20%20%20%20%20%20attestationCollections%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20name%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```graphql' >> $GITHUB_STEP_SUMMARY
          echo 'query {' >> $GITHUB_STEP_SUMMARY
          echo '  dsses(first: 10) {' >> $GITHUB_STEP_SUMMARY
          echo '    edges {' >> $GITHUB_STEP_SUMMARY
          echo '      node {' >> $GITHUB_STEP_SUMMARY
          echo '        gitoidSha256' >> $GITHUB_STEP_SUMMARY
          echo '        payloadType' >> $GITHUB_STEP_SUMMARY
          echo '        statement {' >> $GITHUB_STEP_SUMMARY
          echo '          predicate' >> $GITHUB_STEP_SUMMARY
          echo '          attestationCollections {' >> $GITHUB_STEP_SUMMARY
          echo '            name' >> $GITHUB_STEP_SUMMARY
          echo '          }' >> $GITHUB_STEP_SUMMARY
          echo '        }' >> $GITHUB_STEP_SUMMARY
          echo '      }' >> $GITHUB_STEP_SUMMARY
          echo '    }' >> $GITHUB_STEP_SUMMARY
          echo '  }' >> $GITHUB_STEP_SUMMARY
          echo '}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üèóÔ∏è Find attestations for ghcr.io/testifysec/witness-demo images" >> $GITHUB_STEP_SUMMARY
          echo "[‚ñ∂Ô∏è Run this query](https://archivista.testifysec.io/query?query=%7B%0A%20%20dsses(where%3A%20%7B%0A%20%20%20%20hasStatementWith%3A%20%7B%0A%20%20%20%20%20%20hasSubjectsWith%3A%20%7B%0A%20%20%20%20%20%20%20%20nameContains%3A%20%22ghcr.io%2Ftestifysec%2Fwitness-demo%22%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%2C%20first%3A%2010)%20%7B%0A%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20gitoidSha256%0A%20%20%20%20%20%20%20%20payloadType%0A%20%20%20%20%20%20%20%20statement%20%7B%0A%20%20%20%20%20%20%20%20%20%20predicate%0A%20%20%20%20%20%20%20%20%20%20subjects(first%3A%205)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20name%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20attestationCollections%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20name%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```graphql' >> $GITHUB_STEP_SUMMARY
          echo 'query {' >> $GITHUB_STEP_SUMMARY
          echo '  dsses(where: {' >> $GITHUB_STEP_SUMMARY
          echo '    hasStatementWith: {' >> $GITHUB_STEP_SUMMARY
          echo '      hasSubjectsWith: {' >> $GITHUB_STEP_SUMMARY
          echo '        nameContains: "ghcr.io/testifysec/witness-demo"' >> $GITHUB_STEP_SUMMARY
          echo '      }' >> $GITHUB_STEP_SUMMARY
          echo '    }' >> $GITHUB_STEP_SUMMARY
          echo '  }, first: 10) {' >> $GITHUB_STEP_SUMMARY
          echo '    edges {' >> $GITHUB_STEP_SUMMARY
          echo '      node {' >> $GITHUB_STEP_SUMMARY
          echo '        gitoidSha256' >> $GITHUB_STEP_SUMMARY
          echo '        payloadType' >> $GITHUB_STEP_SUMMARY
          echo '        statement {' >> $GITHUB_STEP_SUMMARY
          echo '          predicate' >> $GITHUB_STEP_SUMMARY
          echo '          subjects(first: 5) {' >> $GITHUB_STEP_SUMMARY
          echo '            edges {' >> $GITHUB_STEP_SUMMARY
          echo '              node {' >> $GITHUB_STEP_SUMMARY
          echo '                name' >> $GITHUB_STEP_SUMMARY
          echo '              }' >> $GITHUB_STEP_SUMMARY
          echo '            }' >> $GITHUB_STEP_SUMMARY
          echo '          }' >> $GITHUB_STEP_SUMMARY
          echo '          attestationCollections {' >> $GITHUB_STEP_SUMMARY
          echo '            name' >> $GITHUB_STEP_SUMMARY
          echo '          }' >> $GITHUB_STEP_SUMMARY
          echo '        }' >> $GITHUB_STEP_SUMMARY
          echo '      }' >> $GITHUB_STEP_SUMMARY
          echo '    }' >> $GITHUB_STEP_SUMMARY
          echo '  }' >> $GITHUB_STEP_SUMMARY
          echo '}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üîê Get full attestation bundle by GitOID" >> $GITHUB_STEP_SUMMARY
          echo "[‚ñ∂Ô∏è Run this query](https://archivista.testifysec.io/query?query=query%20AttestationByGitOID(%24gitoid%3A%20String!)%20%7B%0A%20%20dsses(where%3A%20%7B%0A%20%20%20%20gitoidSha256%3A%20%24gitoid%0A%20%20%7D)%20%7B%0A%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20gitoidSha256%0A%20%20%20%20%20%20%20%20payloadType%0A%20%20%20%20%20%20%20%20signatures%20%7B%0A%20%20%20%20%20%20%20%20%20%20keyID%0A%20%20%20%20%20%20%20%20%20%20signature%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20payloadDigests%20%7B%0A%20%20%20%20%20%20%20%20%20%20algorithm%0A%20%20%20%20%20%20%20%20%20%20value%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20statement%20%7B%0A%20%20%20%20%20%20%20%20%20%20predicate%0A%20%20%20%20%20%20%20%20%20%20subjects(first%3A%2010)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20name%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20attestationCollections%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20name%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D&variables=%7B%22gitoid%22%3A%20%22%22%7D)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```graphql' >> $GITHUB_STEP_SUMMARY
          echo 'query AttestationByGitOID($gitoid: String!) {' >> $GITHUB_STEP_SUMMARY
          echo '  dsses(where: {' >> $GITHUB_STEP_SUMMARY
          echo '    gitoidSha256: $gitoid' >> $GITHUB_STEP_SUMMARY
          echo '  }) {' >> $GITHUB_STEP_SUMMARY
          echo '    edges {' >> $GITHUB_STEP_SUMMARY
          echo '      node {' >> $GITHUB_STEP_SUMMARY
          echo '        gitoidSha256' >> $GITHUB_STEP_SUMMARY
          echo '        payloadType' >> $GITHUB_STEP_SUMMARY
          echo '        signatures {' >> $GITHUB_STEP_SUMMARY
          echo '          keyID' >> $GITHUB_STEP_SUMMARY
          echo '          signature' >> $GITHUB_STEP_SUMMARY
          echo '        }' >> $GITHUB_STEP_SUMMARY
          echo '        payloadDigests {' >> $GITHUB_STEP_SUMMARY
          echo '          algorithm' >> $GITHUB_STEP_SUMMARY
          echo '          value' >> $GITHUB_STEP_SUMMARY
          echo '        }' >> $GITHUB_STEP_SUMMARY
          echo '        statement {' >> $GITHUB_STEP_SUMMARY
          echo '          predicate' >> $GITHUB_STEP_SUMMARY
          echo '          subjects(first: 10) {' >> $GITHUB_STEP_SUMMARY
          echo '            edges {' >> $GITHUB_STEP_SUMMARY
          echo '              node {' >> $GITHUB_STEP_SUMMARY
          echo '                name' >> $GITHUB_STEP_SUMMARY
          echo '              }' >> $GITHUB_STEP_SUMMARY
          echo '            }' >> $GITHUB_STEP_SUMMARY
          echo '          }' >> $GITHUB_STEP_SUMMARY
          echo '          attestationCollections {' >> $GITHUB_STEP_SUMMARY
          echo '            name' >> $GITHUB_STEP_SUMMARY
          echo '          }' >> $GITHUB_STEP_SUMMARY
          echo '        }' >> $GITHUB_STEP_SUMMARY
          echo '      }' >> $GITHUB_STEP_SUMMARY
          echo '    }' >> $GITHUB_STEP_SUMMARY
          echo '  }' >> $GITHUB_STEP_SUMMARY
          echo '}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          
          echo "### üîç Find all SLSA provenance attestations" >> $GITHUB_STEP_SUMMARY
          echo "[‚ñ∂Ô∏è Run this query](https://archivista.testifysec.io/query?query=%7B%0A%20%20dsses(where%3A%20%7B%0A%20%20%20%20hasStatementWith%3A%20%7B%0A%20%20%20%20%20%20predicateHasPrefix%3A%20%22https%3A%2F%2Fslsa.dev%2Fprovenance%2F%22%0A%20%20%20%20%7D%0A%20%20%7D%2C%20first%3A%2010)%20%7B%0A%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20gitoidSha256%0A%20%20%20%20%20%20%20%20statement%20%7B%0A%20%20%20%20%20%20%20%20%20%20predicate%0A%20%20%20%20%20%20%20%20%20%20subjects(first%3A%205)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20name%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```graphql' >> $GITHUB_STEP_SUMMARY
          echo 'query {' >> $GITHUB_STEP_SUMMARY
          echo '  dsses(where: {' >> $GITHUB_STEP_SUMMARY
          echo '    hasStatementWith: {' >> $GITHUB_STEP_SUMMARY
          echo '      predicateHasPrefix: "https://slsa.dev/provenance/"' >> $GITHUB_STEP_SUMMARY
          echo '    }' >> $GITHUB_STEP_SUMMARY
          echo '  }, first: 10) {' >> $GITHUB_STEP_SUMMARY
          echo '    edges {' >> $GITHUB_STEP_SUMMARY
          echo '      node {' >> $GITHUB_STEP_SUMMARY
          echo '        gitoidSha256' >> $GITHUB_STEP_SUMMARY
          echo '        statement {' >> $GITHUB_STEP_SUMMARY
          echo '          predicate' >> $GITHUB_STEP_SUMMARY
          echo '          subjects(first: 5) {' >> $GITHUB_STEP_SUMMARY
          echo '            edges {' >> $GITHUB_STEP_SUMMARY
          echo '              node {' >> $GITHUB_STEP_SUMMARY
          echo '                name' >> $GITHUB_STEP_SUMMARY
          echo '              }' >> $GITHUB_STEP_SUMMARY
          echo '            }' >> $GITHUB_STEP_SUMMARY
          echo '          }' >> $GITHUB_STEP_SUMMARY
          echo '        }' >> $GITHUB_STEP_SUMMARY
          echo '      }' >> $GITHUB_STEP_SUMMARY
          echo '    }' >> $GITHUB_STEP_SUMMARY
          echo '  }' >> $GITHUB_STEP_SUMMARY
          echo '}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìä Download and analyze attestation locally" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo '# Download attestation by GitOID' >> $GITHUB_STEP_SUMMARY
          echo 'curl -s https://archivista.testifysec.io/download/<GITOID> -o attestation.json' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '# Decode and explore the attestation' >> $GITHUB_STEP_SUMMARY
          echo 'jq -r ".payload" attestation.json | base64 -d | jq .' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '# Extract specific attestation types' >> $GITHUB_STEP_SUMMARY
          echo 'jq -r ".payload" attestation.json | base64 -d | \' >> $GITHUB_STEP_SUMMARY
          echo '  jq ".predicate.attestations[] | select(.type == \"https://witness.dev/attestations/docker/v0.1\")"' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '# Check GitHub actor from attestation' >> $GITHUB_STEP_SUMMARY
          echo 'jq -r ".payload" attestation.json | base64 -d | \' >> $GITHUB_STEP_SUMMARY
          echo '  jq ".predicate.attestations[] | select(.type == \"https://witness.dev/attestations/github/v0.1\") | .attestation.jwt.claims.actor"' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY